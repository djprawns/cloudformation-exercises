# AWSTemplateFormatVersion: "2010-09-09"
# Description: CloudFormation example template from Polynique
# Parameters:
#   Email:
#     Type: String
#     Default: pranavsharma.sre@gmail.com
#     Description: Email to receive S3 object created notification
#   BucketName:
#     Type: String
#     Default: pranavbucket-test
#     Description: Unique S3 bucket name
# Resources:
#   Bucket:
#     Type: AWS::S3::Bucket
#     Properties:
#       BucketName: !Ref BucketName
#       AccessControl: Private
#       PublicAccessBlockConfiguration:
#         BlockPublicAcls: True
#         BlockPublicPolicy: True
#         IgnorePublicAcls: True
#         RestrictPublicBuckets: True

AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: CloudFormation example template from Polynique
Parameters:
  Email:
    Type: String
    Default: pranavsharma.sre@gmail.com
    Description: Email to receive S3 object created notification
  BucketName:
    Type: String
    Default: pranavs-bucket
    Description: Unique S3 bucket name
Resources:
  Bucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - SNSTopicPolicy
    Properties:
      BucketName: !Join ["-", [!Ref AWS::StackName, !Ref BucketName]]
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      NotificationConfiguration:
        TopicConfigurations:
          - Topic: !Ref Topic
            Event: s3:ObjectCreated:*
  Topic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Join ["-", [!Ref AWS::StackName, "topic"]]
      TopicName: !Join ["-", [!Ref AWS::StackName, "topic"]]
      Subscription:
        - Protocol: email
          Endpoint: !Ref Email
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs14.x
      Role: !GetAtt LambdaFunctionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (snsEvent) => {
            console.log(JSON.stringify(snsEvent));
          }
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LambdaFunctionRolePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"

  # Allows SNS to call our Lambda function.
  LambdaFunctionSNSPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn:
        !Join
        - ''
        - - 'arn:'
          - !Ref AWS::Partition
          - ':sns:'
          - !Ref AWS::Region
          - ':'
          - !Ref AWS::AccountId
          - ':'
          - !Ref Topic
